import numpy as np
import pandas as pd
import sklearn.neighbors

def do_FMLN_encoding(peplist, m=8, n=3):
    """
    First m last n. e.g. for FELT encoding, the default, m=8, n=3

    :param peplist: the list of peptides to encode

    :param m: use the first m residues

    :param n: concatenated with the last n residues

    :returns: encoded peptide list
    """

    return [p[0:m] + p[-n:] for p in peplist]


def do_LEFT_encoding(peplist, m=5):
    """
    First m 

    :param peplist: the list of peptides to encode

    :param m: use the first m residues

    :returns: encoded peptide list
    """

    return [p[0:m] for p in peplist]

def do_RIGHT_encoding(peplist, n=5):
    """
    Last n

    :param peplist: the list of peptides to encode

    :param n: use the last n residues

    :returns: encoded peptide list
    """

    return [p[-n:] for p in peplist]


amino_acids = "ACDEFGHIKLMNPQRSTVWY"

aa5d = {"A": [0.354311, 3.76204, -11.0357, -0.648649, 2.82792],
        "R": [7.5734, -10.135, 2.48594, -4.29106, -5.6871],
        "N": [11.2937, 1.06685, 2.71827, 1.96258, -0.859314],
        "D": [13.4195, -1.60027, -0.325263, 3.7422, 2.43733],
        "C": [-5.84613, 4.88503, 1.62632, 9.39709, -5.84334],
        "Q": [6.59904, -5.16578, -0.696992, 0.582121, -1.74988],
        "E": [9.78784, -7.86097, -7.31842, 2.61123, 4.73404],
        "G": [9.65497, 15.7781, -0.557594, 0.299376, 1.65613],
        "H": [1.01864, -4.96926, 0.952556, 4.65696, -0.328102],
        "I": [-15.634, 1.99332, -2.04451, -3.24324, -1.67176],
        "L": [-11.8251, 0.505348, -6.15677, -4.55717, 3.21852],
        "K": [10.7622, -9.51739, -1.02226, -5.40541, -0.421845],
        "M": [-10.585, -3.95856, -3.60113, 5.33888, 1.20304],
        "F": [-14.571, -0.645723, 1.67278, -0.033264, 3.24977],
        "P": [7.66197, 8.02942, 9.45586, -3.57588, 5.99957],
        "S": [8.81349, 6.68183, -0.348496, -1.13098, -3.06228],
        "T": [3.01164, 4.12701, -0.348496, -2.19543, -4.28095],
        "W": [-13.1095, -5.22193, 9.03767, 1.38046, 4.6403],
        "Y": [-6.24473, -1.60027, 9.87406, -1.59667, -1.42177],
        "V": [-12.1352, 3.81819, -4.34459, -3.25988, -4.67154],
        "X": [0.0, 0.0, 0.0, 0.0, 0.0]}
# note the final amino acid, X. this is in some of the test data (rarely though)


def do_5d_encoding(peplist):
    """
    5D encoding using amino acid multi dimensional scaling properties

    :param peplist: the list of peptides to encode

    :returns: encoded peptide list
    """
    e = []
    for p in peplist:
        d = []
        for c in p:
            d = d + aa5d[c]
        e.append(d)

    return e

# a dictionary containing the 7d encoding of the HLA alleles.
hla7d = {"A0101": [324.766, -42.3269, -9.42882, -35.6718, 169.164, -83.6432, 116.185],
         "A0201": [333.475, -85.0009, -65.4655, 70.537, -140.327, 82.7846, 4.63228],
         "A0202": [344.584, -62.1799, -58.103, 73.5427, -128.878, 102.699, -1.45338],
         "A0203": [361.85, -26.4017, -126.734, 4.86373, -107.062, 116.761, -12.5105],
         "A0204": [358.149, -90.8417, -28.4419, 76.2574, -121.966, 54.3282, -22.6128],
         "A0205": [332.949, -62.0543, -60.4789, 63.3079, -134.188, 96.2142, -19.5234],
         "A0206": [322.256, -84.6104, -67.8361, 60.5319, -145.458, 76.8616, -13.0925],
         "A0207": [346.455, -81.7856, -55.6056, 76.3887, -146.425, 95.1263, 5.07423],
         "A0211": [359.37, -54.7699, -61.9689, 65.3301, -124.59, 87.8622, -15.5576],
         "A0301": [285.522, -8.30883, -49.5867, -35.1263, 25.2693, -58.4191, 26.4301],
         "A1101": [278.017, 4.32194, -34.657, -31.813, 81.4289, -58.3968, 61.2415],
         "A1102": [285.501, 4.94663, -39.8893, -33.831, 86.9057, -63.3131, 62.8656],
         "A2301": [192.451, -231.225, 201.831, -66.6266, 59.3638, 137.106, -31.3582],
         "A2402": [237.685, -224.811, 240.209, -49.2404, 90.6779, 153.934, -21.6082],
         "A2407": [229.738, -216.824, 234.222, -55.2818, 96.4689, 156.96, -26.4362],
         "A2501": [141.232, -167.11, -64.8661, -209.027, 168.433, 21.7572, -37.5103],
         "A2601": [225.674, -13.8584, -147.672, -48.73, 94.9768, -55.898, 6.13798],
         "A2902": [242.649, -71.756, 0.66427, 31.4797, 37.961, -91.0264, 6.98198],
         "A3001": [279.857, -14.7696, 4.80853, 21.1388, 22.5339, -74.5164, 25.8432],
         "A3002": [246.518, -63.8862, 10.8413, 29.9867, 60.0964, -99.409, 6],
         "A3101": [280.054, -38.4118, 0.894747, 17.0068, 16.1997, -67.6481, 58.4783],
         "A3201": [129.9, -201.877, 74.7643, -108.84, 76.3698, -10.8929, 3.53094],
         "A3301": [256.137, -41.1085, -30.3413, 30.9549, 45.954, -73.1464, -14.4398],
         "A3303": [250.84, -37.9172, -23.4074, 31.0795, 38.0265, -67.9381, -3.90866],
         "A3401": [236.39, 34.3235, -155.355, -61.707, 70.4852, 10.7366, -1.80241],
         "A3402": [267.471, 3.76176, -106.123, -51.947, 83.6979, -78.0087, -32.8851],
         "A3601": [296.601, -16.0174, -13.4141, -21.6886, 112.476, -93.645, 56.6737],
         "A6601": [236.844, 18.4454, -163.663, -61.3822, 80.2009, -35.8095, 10.7005],
         "A6801": [315.35, -50.7132, -68.6625, 32.7446, 7.1676, -45.0664, -46.2176],
         "A6802": [256.781, -59.2995, -105.007, 54.7035, -46.7105, 12.145, -65.7847],
         "A7401": [220.182, -38.6808, -14.3565, 6.00363, 0.246707, -54.2285, 45.2022],
         "B0702": [-120.711, 86.7746, -24.7856, 105.302, 143.364, -15.8973, -128.968],
         "B0704": [-124.872, 81.6682, -34.0575, 107.76, 146.229, -7.83603, -124.556],
         "B0801": [-153.426, 12.0477, 16.5871, 171.572, 91.7852, -6.30467, -77.5888],
         "B1301": [-267.383, -220.387, -1.67179, 9.4758, -84.1126, 30.3925, 31.3891],
         "B1302": [-262.215, -222.599, 30.2632, 45.8475, -26.426, 15.9047, 2.08898],
         "B1402": [-148.316, 28.9807, -37.4203, 73.3018, 92.2331, -25.3369, -53.8978],
         "B1501": [-187.877, -30.2155, -91.7606, 0.492643, -38.4483, -67.3954, 37.4444],
         "B1502": [-192.472, -47.6736, -127.934, -16.7632, -41.8775, -110.559, 40.9629],
         "B1503": [-221.983, -18.2716, -93.3081, 31.4279, -9.58137, -40.2643, 38.9182],
         "B1510": [-215.021, -26.319, -105.145, 55.9558, -12.3584, -13.8524, -48.1012],
         "B1517": [-116.151, -162.46, 37.2685, -210.873, -20.6844, -39.4808, 14.675],
         "B1801": [-176.431, -44.6879, -69.9558, 122.489, 27.4772, -17.0521, 12.6456],
         "B2705": [-114.901, -124.754, 49.6316, 38.1179, 119.595, 34.6247, 37.5389],
         "B3501": [-206.243, -48.9683, -90.5699, 15.0337, -70.0101, -91.7229, -4.17562],
         "B3503": [-211.611, -48.9634, -78.1823, 42.7428, -90.9641, -47.3979, -36.9566],
         "B3507": [-223.207, -49.705, -104.495, 14.4976, -74.9959, -102.902, -11.4399],
         "B3701": [-163.667, -124.428, 60.7883, 73.7676, 47.7489, 126.191, 67.166],
         "B3801": [-203.486, -190.947, 16.4836, 10.3351, 62.6206, 106.855, -99.4469],
         "B3802": [-191.313, -171.067, 0.0800488, 38.4261, 52.4389, 89.494, -78.4657],
         "B4001": [-246.582, -36.5647, -22.9408, 228.283, -25.5104, 22.8211, 76.089],
         "B4002": [-170.638, -53.6915, -25.2698, 195.333, 33.4546, 47.2693, 69.1927],
         "B4006": [-176.216, -61.9119, -35.3419, 198.867, 38.8483, 33.6022, 69.0447],
         "B4201": [-95.1638, 40.691, 13.7983, 144.529, 97.2544, 11.2255, -121.821],
         "B4402": [-282.635, -214.431, 33.5992, -22.2319, 52.5092, 23.4498, 165.85],
         "B4403": [-274.886, -228.035, -1.91267, -32.5896, 8.8742, 12.1218, 158.141],
         "B4501": [-273.033, -53.4082, 2.07051, 160.449, 10.0731, 33.0808, 147.48],
         "B4601": [-96.98, 110.364, -68.3334, -90.4927, -77.2145, -48.4396, -11.7466],
         "B4901": [-314.865, -164.287, 22.8002, -49.417, 29.8044, 96.3947, 88.7368],
         "B5001": [-264.912, -15.9007, -86.9117, 89.7673, -14.8012, 2.52236, 113.391],
         "B5101": [-253.124, -177.153, -20.2465, -93.7343, 41.0953, 18.4837, -120.525],
         "B5201": [-260.05, -172.115, 19.1753, -76.5082, 11.154, 37.1966, -43.6924],
         "B5301": [-249.69, -184.2, -3.59567, -113.015, -27.5088, -16.2248, -41.1715],
         "B5401": [-162.196, 42.885, 2.32797, 47.273, -6.62129, -56.5085, -101.107],
         "B5501": [-163.593, 40.8951, -45.8945, 26.5072, 42.3958, -71.1925, -110.493],
         "B5502": [-153.487, 7.54264, -6.84504, 72.5769, 6.94411, -67.8642, -101.993],
         "B5601": [-174.507, -1.17092, -18.1727, 56.4199, -4.22751, -87.1624, -94.2318],
         "B5701": [-125.868, -238.13, 83.1821, -162.054, -106.102, -122.31, -11.836],
         "B5703": [-122.64, -247.918, 100.764, -115.853, -129.493, -67.7032, -59.67],
         "B5801": [-162.986, -182.92, 66.8455, -162.546, -141.857, -33.3733, -2.19717],
         "B5802": [-144.128, -167.694, 139.375, -136.127, -89.3486, -60.0733, -22.5441],
         "C0102": [-27.5086, 253.261, 60.0832, 11.0726, 33.403, 85.608, -12.9594],
         "C0202": [-66.8217, 230.536, -35.7476, -106.042, -32.1818, 36.9678, 16.0958],
         "C0302": [-87.7161, 177.227, -56.4427, -104.639, -70.5721, -12.0704, 27.4498],
         "C0303": [-87.913, 189.107, -46.111, -80.9729, -100.866, 9.58792, -1.88126],
         "C0304": [-80.6525, 168.845, -49.6165, -76.0399, -89.6026, 19.0713, 3.15259],
         "C0401": [-20.5546, 268.514, 59.8682, -45.0003, 61.6652, 121.617, -4.60906],
         "C0403": [-49.4761, 249.561, 30.898, -72.8017, 7.18241, 83.2845, -11.2701],
         "C0501": [-52.0165, 242.156, 20.3453, -54.835, -16.6971, 95.5259, -27.2367],
         "C0602": [-46.6338, 268.249, 33.4088, -89.0955, 55.0966, 15.831, 45.4416],
         "C0701": [-72.5735, 247.666, 7.70436, -36.9451, 23.2499, -15.8764, 77.5906],
         "C0702": [-76.6601, 269.536, 11.7907, -32.2402, 8.03214, 43.0429, 74.5395],
         "C0704": [-83.2365, 292.148, 32.7894, 12.4237, 40.9147, 93.7188, 53.2889],
         "C0801": [-66.8049, 201.389, 1.70581, -10.3739, -65.3183, 77.3472, -28.5976],
         "C0802": [-59.7972, 247.731, 3.85076, -29.6895, -12.0939, 82.7751, -28.1321],
         "C1202": [-55.8652, 223.027, -35.5587, -72.4501, -31.8726, 28.8749, 4.86058],
         "C1203": [-44.978, 233.445, 7.35961, -77.3969, -10.6832, -13.7036, -5.57605],
         "C1402": [-16.6864, 247.1, 93.1332, -38.481, 53.3043, 13.2742, 11.4426],
         "C1403": [-19.3572, 261.843, 92.2812, -46.6671, 52.6951, 15.6073, 9.88445],
         "C1502": [-93.1043, 197.009, -28.973, -100.831, -73.5043, -17.2725, -22.5644],
         "C1601": [-41.7196, 212.433, 59.5754, -42.8664, -2.35308, -17.7098, 20.321],
         "C1701": [-76.1826, 218.541, -19.9087, -54.7388, -56.7312, 57.7515, -4.95788],
         "G0101": [139.215, 131.822, 343.099, 124.984, -87.553, -138.057, 3.97286],
         "G0103": [140.516, 134.158, 348.06, 126.989, -88.7754, -141.79, 3.23507],
         "G0104": [140.747, 134.572, 348.944, 127.347, -88.9943, -142.455, 3.10482]}

# considering left and right portions of alleles separately, be can again use multi-dimensional
# scaling on the distances [left and right portions of MHC molecule separately]
hlaLEFT6d = {
    "A0101": [165.141, -27.6456, 45.7236, 52.4973, 56.6699, 135.567],
    "A0201": [153.607, -54.0871, -71.4076, 16.1922, -47.1902, -25.9252],
    "A0202": [164.286, -40.4377, -84.8214, 25.171, -34.587, 3.35899],
    "A0203": [164.026, -39.9012, -80.26, 26.7709, -31.5382, 4.31011],
    "A0204": [179.298, -44.795, -43.0206, 0.394452, -25.5349, -32.0573],
    "A0205": [154.13, -40.8422, -85.5998, 14.0206, -31.3678, 8.5452],
    "A0206": [144.136, -54.1693, -72.4741, 6.13461, -43.7694, -20.3129],
    "A0207": [165.433, -46.0863, -73.9599, 19.431, -53.3367, -32.9457],
    "A0211": [153.607, -54.0871, -71.4076, 16.1922, -47.1902, -25.9252],
    "A0301": [146.756, -37.4542, 16.5208, -15.3822, 2.87652, -10.5001],
    "A1101": [120.128, -19.6543, 29.9953, 4.40337, 39.7227, 65.2076],
    "A1102": [120.128, -19.6543, 29.9953, 4.40337, 39.7227, 65.2076],
    "A2301": [183.71, 2.01994, 38.5591, 90.8026, -18.4595, -40.845],
    "A2402": [192.043, 36.6988, 60.5414, 124.181, 20.5393, 15.284],
    "A2407": [192.043, 36.6988, 60.5414, 124.181, 20.5393, 15.284],
    "A2501": [82.9304, -56.3789, -28.6909, -0.863718, 43.3521, 25.0891],
    "A2601": [82.9304, -56.3789, -28.6909, -0.863718, 43.3521, 25.0891],
    "A2902": [151.027, -36.856, 31.675, -19.3734, 18.6375, -47.3172],
    "A3001": [158.396, -13.8133, 46.5533, -18.3984, -5.1238, -46.2379],
    "A3002": [158.396, -13.8133, 46.5533, -18.3984, -5.1238, -46.2379],
    "A3101": [151.587, -25.7143, 32.2285, -5.64831, -3.49153, -46.1829],
    "A3201": [103.466, -24.4104, 14.2656, -6.39768, -2.44023, -6.87092],
    "A3301": [125.862, -41.0235, 31.4109, -17.8324, 46.5053, -65.4077],
    "A3303": [120.374, -33.592, 32.0975, -11.195, 37.9536, -53.7181],
    "A3401": [81.2899, -34.6359, -48.241, 21.7029, 43.8006, 3.48127],
    "A3402": [117.497, -49.7911, 13.9197, -33.231, 50.7387, -18.0427],
    "A3601": [138.04, -2.52476, 28.1587, -5.75239, 51.3407, 66.0021],
    "A6601": [82.9304, -56.3789, -28.6909, -0.863718, 43.3521, 25.0891],
    "A6801": [124.895, -36.3242, 7.17792, -19.3475, 63.9972, 0.35644],
    "A6802": [87.2365, -45.0389, -29.8279, 4.71507, 39.0024, 5.69499],
    "A7401": [103.466, -24.4104, 14.2656, -6.39768, -2.44023, -6.87092],
    "B0702": [-139.489, -26.802, 43.6863, -15.7398, 112.447, 38.47],
    "B0704": [-144.651, -39.0512, 37.831, -4.90942, 113.661, 32.139],
    "B0801": [-108.472, -27.5878, 64.5541, 26.1955, 110.815, -34.7896],
    "B1301": [-100.172, -61.4543, 23.7899, -12.3849, -52.7727, 15.0156],
    "B1302": [-97.6875, -62.7418, 51.448, -22.8955, -32.4239, 14.9728],
    "B1402": [-69.5103, -30.9052, 42.9359, -10.5323, 54.3272, -52.2729],
    "B1501": [-67.5277, -51.5831, 6.78264, -29.3209, -42.8258, 56.8796],
    "B1502": [-60.4171, -61.9018, 11.1731, -30.9699, -29.9872, 15.0185],
    "B1503": [-104.933, -52.0824, 9.99158, -6.62334, -30.3435, -1.70168],
    "B1510": [-105.182, -69.0733, -5.40281, -20.9991, 15.4092, -11.8411],
    "B1517": [13.8812, -31.8564, -11.7911, -41.0676, -55.6108, 42.2779],
    "B1801": [-112.566, -50.9044, 16.4387, -5.72939, 11.5175, -77.5032],
    "B2705": [-84.1678, -59.5233, 38.5042, 61.9999, -15.7618, -39.9434],
    "B3501": [-86.933, -36.7216, -21.1878, -41.4422, 4.27367, 2.29298],
    "B3503": [-86.933, -36.7216, -21.1878, -41.4422, 4.27367, 2.29298],
    "B3507": [-86.933, -36.7216, -21.1878, -41.4422, 4.27367, 2.29298],
    "B3701": [-85.3869, 11.5523, 44.4767, 70.4268, -9.01256, -12.0447],
    "B3801": [-93.8295, -63.5498, -4.11524, -5.95854, 40.9518, -33.8193],
    "B3802": [-93.8295, -63.5498, -4.11524, -5.95854, 40.9518, -33.8193],
    "B4001": [-165.764, -87.5141, 51.3014, 48.5853, -41.0061, -26.2213],
    "B4002": [-136.562, -77.0055, 65.3069, 39.6584, -32.3036, -26.1594],
    "B4006": [-131.924, -74.2172, 68.0601, 37.2866, -33.721, -25.5677],
    "B4201": [-115.693, -28.4065, 29.228, 10.3438, 104.825, 8.83212],
    "B4402": [-136.078, -45.6286, 54.1526, 107.967, -51.3827, 83.6071],
    "B4403": [-126.577, -73.4633, 26.008, 75.4392, -80.2381, 24.5862],
    "B4501": [-146.666, -22.514, 75.4488, 124.558, -65.2314, 52.3324],
    "B4601": [-33.0039, -4.08675, -45.8586, -28.016, -23.7904, 59.9034],
    "B4901": [-127.99, -41.5712, 31.1298, 40.3324, -86.7176, -26.9378],
    "B5001": [-127.99, -41.5712, 31.1298, 40.3324, -86.7176, -26.9378],
    "B5101": [-84.3838, -66.3463, -2.95117, -48.9353, 36.7439, -2.374],
    "B5201": [-89.3579, -50.3977, 21.9316, -30.6902, -23.2463, 5.85009],
    "B5301": [-86.933, -36.7216, -21.1878, -41.4422, 4.27367, 2.29298],
    "B5401": [-89.1909, 11.0905, -14.1655, -40.5975, 46.3445, -30.7809],
    "B5501": [-79.4811, -23.7729, 10.6797, -31.4096, 44.6479, -25.4804],
    "B5502": [-79.4811, -23.7729, 10.6797, -31.4096, 44.6479, -25.4804],
    "B5601": [-97.3236, -38.3969, 7.18836, -44.207, 28.5653, 1.11481],
    "B5701": [22.8705, -47.8863, 6.39749, -105.555, -46.5868, 51.7762],
    "B5703": [22.5261, -53.2858, 7.43231, -100.857, -45.1754, 49.9382],
    "B5801": [-18.7082, -16.2476, -38.4377, -73.4072, -66.8837, 28.251],
    "B5802": [-4.88897, 4.81686, -1.37963, -97.0097, -51.1483, 25.065],
    "C0102": [-48.3983, 157.596, -27.8188, 21.6929, 30.4051, 9.14463],
    "C0202": [-59.8414, 79.8798, -89.3155, 4.69686, -1.90179, 29.6075],
    "C0302": [-50.0553, 34.3238, -66.4495, -4.79079, -32.3204, 11.359],
    "C0303": [-50.0553, 34.3238, -66.4495, -4.79079, -32.3204, 11.359],
    "C0304": [-50.0553, 34.3238, -66.4495, -4.79079, -32.3204, 11.359],
    "C0401": [-33.6852, 126.581, -8.57762, 38.1981, -3.21229, -1.17518],
    "C0403": [-35.1156, 95.7716, -24.3584, 22.2622, 0.779385, 32.5143],
    "C0501": [-55.2987, 115.671, -69.8894, 16.4539, 20.7891, 33.6706],
    "C0602": [-48.6931, 129.818, -27.6144, 17.7146, 19.8913, -42.1498],
    "C0701": [-63.02, 89.5895, -32.7105, 3.61083, -6.92713, -58.6932],
    "C0702": [-71.4899, 109.113, -63.154, 31.8024, -17.5729, -78.0593],
    "C0704": [-76.7191, 130.371, -46.049, 61.8964, 22.4004, -15.8208],
    "C0801": [-55.8312, 80.0254, -92.3212, -0.221097, -5.82188, -25.8159],
    "C0802": [-55.2987, 115.671, -69.8894, 16.4539, 20.7891, 33.6706],
    "C1202": [-43.9471, 85.0957, -84.2249, 4.05381, -1.21265, 7.75236],
    "C1203": [-30.1457, 108.997, -51.691, -18.3178, 15.6996, 6.3359],
    "C1402": [-24.0107, 172.842, 10.5271, 14.2692, 19.6437, -5.23325],
    "C1403": [-24.0107, 172.842, 10.5271, 14.2692, 19.6437, -5.23325],
    "C1502": [-60.7587, 63.9659, -56.3388, -46.535, 0.435786, -12.804],
    "C1601": [-32.7283, 123.332, -23.8392, -3.35209, 25.9519, 25.6108],
    "C1701": [-61.1582, 49.2807, -74.2442, -3.64302, -18.1765, 0.459194],
    "G0101": [101.664, 174.74, 168.119, -72.1904, -57.3611, -2.36115],
    "G0103": [103.439, 178.836, 171.865, -75.762, -58.7967, -2.57725],
    "G0104": [103.755, 179.567, 172.538, -76.4009, -59.0564, -2.61586]
}

hlaRIGHT6d = {
    "A0101": [-145.916, 55.2154, 43.7089, 49.1219, -21.0887, -37.9196],
    "A0201": [-159.741, 101.034, -75.1308, -4.55769, 25.0917, 19.1904],
    "A0202": [-157.869, 94.5038, -73.1083, -17.7147, 27.7272, 3.40146],
    "A0203": [-185.997, 63.3402, -14.2586, 11.2265, 123.14, 65.6387],
    "A0204": [-159.741, 101.034, -75.1308, -4.55769, 25.0917, 19.1904],
    "A0205": [-157.869, 94.5038, -73.1083, -17.7147, 27.7272, 3.40146],
    "A0206": [-159.741, 101.034, -75.1308, -4.55769, 25.0917, 19.1904],
    "A0207": [-159.741, 101.034, -75.1308, -4.55769, 25.0917, 19.1904],
    "A0211": [-191.865, 87.7749, -64.2487, -30.2336, 6.15361, 3.51292],
    "A0301": [-140.48, 20.7797, 44.8589, 36.1198, 22.6093, 36.1375],
    "A1101": [-154.766, 30.6863, 41.6926, 34.8651, -20.774, -12.1095],
    "A1102": [-163.63, 31.5922, 44.4549, 40.0507, -22.7738, -15.8348],
    "A2301": [25.4773, 156.376, 45.2425, -95.1014, 3.03215, -3.36759],
    "A2402": [3.37503, 186.463, 42.3109, -101.638, 11.7507, 10.042],
    "A2407": [6.76518, 175.859, 47.0484, -100.316, 12.5833, 11.493],
    "A2501": [4.1478, 121.512, 209.646, 6.47914, 25.8227, -8.72228],
    "A2601": [-136.185, 30.4831, 76.8448, 60.3725, 26.4351, -11.3758],
    "A2902": [-86.0797, 55.0543, 0.860499, 40.4348, -41.5945, -16.9183],
    "A3001": [-124.75, 29.4966, -0.636233, 25.7949, -4.30658, -2.07556],
    "A3002": [-84.0868, 51.9489, 12.501, 41.6781, 26.007, -21.3784],
    "A3101": [-124.17, 47.0264, 0.0644503, 34.1325, -53.5767, -14.345],
    "A3201": [32.1285, 141.497, 90.328, -11.0346, -53.2799, -23.7733],
    "A3301": [-124.17, 47.0264, 0.0644503, 34.1325, -53.5767, -14.345],
    "A3303": [-124.17, 47.0264, 0.0644503, 34.1325, -53.5767, -14.345],
    "A3401": [-156.787, 8.99012, 77.737, 54.5357, 24.476, 6.44335],
    "A3402": [-156.787, 8.99012, 77.737, 54.5357, 24.476, 6.44335],
    "A3601": [-145.916, 55.2154, 43.7089, 49.1219, -21.0887, -37.9196],
    "A6601": [-156.787, 8.99012, 77.737, 54.5357, 24.476, 6.44335],
    "A6801": [-172.087, 84.9865, -25.438, 30.2217, -36.1733, 18.5121],
    "A6802": [-150.137, 87.1133, -72.182, 5.27277, 13.5297, 44.2302],
    "A7401": [-110.869, 48.7651, -1.58083, 31.543, -44.9709, -1.78553],
    "B0702": [-8.88965, -45.354, 13.628, -35.0195, 29.7793, -18.5072],
    "B0704": [-8.88965, -45.354, 13.628, -35.0195, 29.7793, -18.5072],
    "B0801": [46.2147, -24.6109, -58.7104, -12.0549, -2.84947, -16.9246],
    "B1301": [198.645, 84.9099, -50.945, 14.4315, 7.89827, 42.1741],
    "B1302": [193.096, 85.2362, -52.0242, -5.25828, 29.4769, -27.3753],
    "B1402": [58.5031, -64.6333, -7.27079, 7.51903, 54.3689, -32.3883],
    "B1501": [96.8555, -57.4821, -7.61565, 69.1044, 30.8223, -10.4833],
    "B1502": [110.767, -61.6435, -10.4, 105.532, 16.9025, 38.1402],
    "B1503": [96.8555, -57.4821, -7.61565, 69.1044, 30.8223, -10.4833],
    "B1510": [93.6054, -50.0775, -38.3804, 27.1772, 67.6981, 5.82795],
    "B1517": [168.076, 41.0943, 115.722, -8.28244, 1.0747, 16.7894],
    "B1801": [65.0865, -1.79938, -45.4417, 50.9886, -8.4795, -58.9445],
    "B2705": [61.0648, 69.2016, 56.0397, -26.018, -68.4646, -41.3591],
    "B3501": [109.55, -22.5329, -65.7449, 82.3591, -39.7117, 15.099],
    "B3503": [114.055, -23.6589, -95.0213, 42.4284, 2.59412, 14.1042],
    "B3507": [123.886, -31.5352, -78.9427, 99.2537, -44.3736, 9.65743],
    "B3701": [109.305, 86.2015, -22.9845, 4.46202, 31.8418, -37.1885],
    "B3801": [150.765, 98.0938, 7.08795, -46.4276, 33.4194, -52.7791],
    "B3802": [132.261, 86.1861, -10.1003, -30.0998, 30.6127, -52.0382],
    "B4001": [78.1026, -28.795, -97.7293, -10.7322, 4.47269, -29.0187],
    "B4002": [38.9664, 1.48476, -65.5655, 0.0602505, 26.6653, -39.9215],
    "B4006": [45.363, 1.88219, -72.3917, 11.1228, 38.1629, -47.711],
    "B4201": [-5.46253, -14.8696, -31.5551, -46.7692, -24.6905, -34.0166],
    "B4402": [172.149, 80.2964, 11.3756, 61.1354, -43.2617, 18.01],
    "B4403": [172.149, 80.2964, 11.3756, 61.1354, -43.2617, 18.01],
    "B4501": [110.752, -23.3114, -88.6497, 38.0991, 18.8099, -36.4707],
    "B4601": [25.4449, -115.71, 14.7828, 26.8598, -13.0179, 29.9664],
    "B4901": [204.556, 35.2572, 59.4885, -5.2884, 77.5708, 0.790556],
    "B5001": [110.333, -63.3594, -35.4631, 59.2678, 75.9379, -16.3076],
    "B5101": [192.57, 45.0513, 45.0548, -20.2277, 81.9115, 19.255],
    "B5201": [192.57, 45.0513, 45.0548, -20.2277, 81.9115, 19.255],
    "B5301": [198.587, 80.7421, 18.0183, 32.93, -38.7204, 28.3986],
    "B5401": [64.1359, -37.6747, -47.051, -8.65883, -29.1701, -21.7896],
    "B5501": [62.5509, -74.7409, 4.81237, 8.54682, 25.1124, -1.78305],
    "B5502": [64.1359, -37.6747, -47.051, -8.65883, -29.1701, -21.7896],
    "B5601": [64.1359, -37.6747, -47.051, -8.65883, -29.1701, -21.7896],
    "B5701": [187.158, 78.6738, 31.8164, -3.25966, -72.6214, 46.3348],
    "B5703": [184.939, 88.1972, -7.97517, -55.9335, -28.5499, 64.2395],
    "B5801": [187.158, 78.6738, 31.8164, -3.25966, -72.6214, 46.3348],
    "B5802": [171.858, 73.5854, 31.5288, -35.9514, -54.2554, -15.6703],
    "C0102": [-39.1333, -87.6247, 4.54021, -39.9096, 40.2758, -6.13075],
    "C0202": [-21.2839, -122.213, 42.1546, -18.6989, -14.0607, 34.2371],
    "C0302": [-5.96715, -132.517, 22.1657, 14.9051, -38.5404, 59.5263],
    "C0303": [-13.442, -145.708, -8.69719, -22.2251, -7.02731, 89.3929],
    "C0304": [-11.141, -120.864, -4.54767, -10.9753, -0.199279, 78.0457],
    "C0401": [-58.4185, -133.496, 56.8898, -60.8571, 46.5621, -53.2297],
    "C0403": [-34.7307, -153.56, 47.5486, -56.0312, 29.252, -7.47257],
    "C0501": [-26.5432, -105.611, 16.5944, -55.0241, 36.3095, 16.5438],
    "C0602": [-32.3914, -127.002, 69.4639, -8.18882, -17.1692, 0.471579],
    "C0701": [-33.5455, -138.657, 27.3814, -8.00516, -61.7092, -43.578],
    "C0702": [-33.5455, -138.657, 27.3814, -8.00516, -61.7092, -43.578],
    "C0704": [-30.5207, -141.64, -0.589511, -39.6493, -9.47808, -54.8108],
    "C0801": [-14.8289, -94.8354, -27.0113, -45.778, -2.31045, -9.93023],
    "C0802": [-24.6053, -114.807, 1.6839, -37.3054, 36.9178, -0.798282],
    "C1202": [-20.0792, -120.748, 25.6638, -2.84243, -13.4983, 3.01207],
    "C1203": [-20.0792, -120.748, 25.6638, -2.84243, -13.4983, 3.01207],
    "C1402": [-35.5345, -93.3699, 29.6285, -0.0430965, 1.73833, -12.1994],
    "C1403": [-38.0553, -106.889, 32.6147, -2.47959, 0.85967, -8.38214],
    "C1502": [-5.30607, -122.607, 16.3689, -12.529, -4.88418, 82.3405],
    "C1601": [-17.5105, -93.8462, 2.06824, -6.36007, -42.5017, -2.15491],
    "C1701": [-25.244, -133.5, 12.302, -59.1698, 14.4435, 13.1208],
    "G0101": [-57.5375, -15.5305, -63.4483, -100.007, -59.5203, 12.3921],
    "G0103": [-57.5375, -15.5305, -63.4483, -100.007, -59.5203, 12.3921],
    "G0104": [-57.5375, -15.5305, -63.4483, -100.007, -59.5203, 12.3921]
}


# HLA SNPS in 6 regionally organized sets
snpSets95 = [[32, 45, 46, 52, 62, 63, 103, 107, 163, 166, 167, 171, 177, 178, 180],
        [65, 66],
        [9, 24, 67, 69, 99, 113, 156],
        [70, 71, 97, 114],
        [12, 73, 95, 116, 152],
        [76, 77, 79, 80, 81, 82, 83, 143]]

snpSets16 = [[32, 45, 46, 52, 62, 63, 103, 107, 163, 166, 167, 171],
        [65, 66],
        [9, 24, 67, 69, 99, 113, 156],
        [70, 71, 97, 114],
        [12, 73, 95, 116, 152],
        [76, 77, 79, 80, 81, 82, 83]]

# for explanation of the following stuff for MHC featurization and bringing into the neural net, see prepareMHCinput.py
# ved is vector of encoding dimension
vedAll95 = [2, 1, 1, 1, 1, 2, 1, 1, 6, 2, 2, 2, 1, 2, 1, 3, 2, 1, 2, 1, 2, 1, 1, 3, 2, 1, 1, 1, 1, 2, 2, 2, 1, 1, 2, 1, 1,
        1, 1, 2, 2, 2, 3, 2, 5, 2, 1, 1, 2, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 2, 5, 3, 1, 3, 3, 7, 1, 3, 5, 3, 1, 3, 3,
        1, 4, 3, 1, 3, 4, 2, 2, 2, 1, 1, 1, 1, 1, 1, 2, 3, 1, 1, 2, 5, 1, 8, 1, 5, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 2, 1,
        1, 2, 6, 1, 6, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 2, 2, 2, 3, 1, 3, 1,
        2, 2, 3, 6, 1, 1, 1, 5, 1, 3, 1, 1, 2, 1, 4, 1, 1, 2, 3, 1, 2, 2, 2, 1, 2, 1, 1, 1, 3, 3, 1, 2, 1, 2]

vedAll16 = [1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1,
        1, 1, 1, 2, 1, 2, 2, 4, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 5, 3, 1, 3, 3, 5, 1, 2, 4, 3, 1, 2, 3, 1, 3,
        3, 1, 2, 3, 2, 2, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 4, 1, 5, 1, 3, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 2, 5, 1,
        4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 2, 2, 1, 1, 1, 2, 2, 2, 3, 1, 1,
        1, 5, 1, 2, 1, 1, 2, 1, 3, 1, 1, 2, 3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]


def get_vedAll(allele_set_number):
    rval = None
    if allele_set_number == 16:
        rval = vedAll16
    elif allele_set_number == 95:
        rval = vedAll95
    else:
        raise Exception(
            'in get_vedAll, expecting 16 or 95, got {}'.format(allele_set_number))
    return rval

def get_snpSets(allele_set_number):
    rval = None
    if allele_set_number == 16:
        rval = snpSets16
    elif allele_set_number == 95:
        rval = snpSets95
    else:
        raise Exception(
            'in get_snpSets, expecting 16 or 95, got {}'.format(allele_set_number))
    return rval


# allele sets are used for building machine learning algorithms that aggregate data across "close" alleles
# should ultimately put in the code which goes from the hla7d and forms (possibly overlapping) allele clusters
# but for now I've done this in matlab: computeHLAdistanceMatrix.m
allele_sets_16 = [[0, 1, 2, 3, 4, 9],
                  [0, 5, 7, 8, 9],
                  [0, 6, 9],
                  [11, 12, 13, 14, 15],
                  [10, 13, 14, 15]]

a16_names = ['A0101', 'A0201', 'A0203', 'A0204', 'A0207', 'A0301', 'A2402', 'A2902', 'A3101', 'A6802',
             'B3501', 'B4402', 'B4403', 'B5101', 'B5401', 'B5701']


allele_sets_95 = [[34, 35, 41, 43, 47, 48, 49, 54, 55, 56, 58, 60, 61, 62, 67, 68, 69, 70],
                  [0, 12, 13, 14, 15, 21, 92, 93, 94],
                  [0, 1, 2, 3, 4, 5, 6, 7, 8, 28, 29],
                  [0, 9, 10, 11, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30],
                  [31, 32, 33, 36, 37, 38, 39, 40, 42, 44, 45, 46, 51, 52, 53, 56, 59, 63, 64, 65, 66],
                  [31, 32, 33, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 56, 59, 63, 64, 65],
                  [57, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91],
                  [71, 72, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91]]

a95_names = ['A0101', 'A0201', 'A0202', 'A0203', 'A0204', 'A0205', 'A0206', 'A0207', 'A0211', 'A0301',
             'A1101', 'A1102', 'A2301', 'A2402', 'A2407', 'A2501', 'A2601', 'A2902', 'A3001', 'A3002',
             'A3101', 'A3201', 'A3301', 'A3303', 'A3401', 'A3402', 'A3601', 'A6601', 'A6801', 'A6802',
             'A7401', 'B0702', 'B0704', 'B0801', 'B1301', 'B1302', 'B1402', 'B1501', 'B1502', 'B1503',
             'B1510', 'B1517', 'B1801', 'B2705', 'B3501', 'B3503', 'B3507', 'B3701', 'B3801', 'B3802',
             'B4001', 'B4002', 'B4006', 'B4201', 'B4402', 'B4403', 'B4501', 'B4601', 'B4901', 'B5001',
             'B5101', 'B5201', 'B5301', 'B5401', 'B5501', 'B5502', 'B5601', 'B5701', 'B5703', 'B5801',
             'B5802', 'C0102', 'C0202', 'C0302', 'C0303', 'C0304', 'C0401', 'C0403', 'C0501', 'C0602',
             'C0701', 'C0702', 'C0704', 'C0801', 'C0802', 'C1202', 'C1203', 'C1402', 'C1403', 'C1502',
             'C1601', 'C1701', 'G0101', 'G0103', 'G0104']

def get_allele_sets(allele_set_number):
    rsets = None
    rnames = None
    if allele_set_number == 16:
        rsets = allele_sets_16
        rnames = a16_names
    elif allele_set_number == 95:
        rsets = allele_sets_95
        rnames = a95_names
    else:
        raise Exception(
            'in get_allele_sets, expecting 16 or 95, got {}'.format(allele_set_number))
    return rsets, rnames


def split_into_sets(xydata, xa, classmembers, canames):
    """
    Partitions a full dataset into subsets based on given allele sets (called classmembers).

    :param xydata: this is the machine learning ready data, as a numpy array where last column is y data to predict
    
    :param xa: allele names that go along with the xydata

    :param classmembers: a list of lists. classmembers[0] is the list of allele integer identifiers that constitute the first (0th) allele set
    
    :param canames: these are the allele names, the indexing of this list corresponds to the allele integer identifier (could have also used a dictionary)

    :return: the xydata split into subsets (possibly overlapping, i.e. rows can go into more than one set)
             and, for each set, the allele list (classmembers) corresponding to it.
    """

    # replace allele names with unique integers [where they are in a16_names, or a95_names : called canames in general]:
    xai = []
    for i in range(len(xa)):
        xai.append(canames.index(xa[i]))

    # return will be a list of numpy arrays, which are the xydata with only the correct rows.
    xysets = []
    forestmembers = []
    # now step through and form 5 (8 if 95 allele dataset) subsets
    for i in range(len(classmembers)):
        # select all the rows for these classmembers
        myi = np.where(np.in1d(xai, classmembers[i]))
        # xysets.append(xydata[tuple(myi),:])
        # save if we found some samples that are in this set:
        if len(myi[0]) > 0:
            xysets.append(xydata[tuple(myi)])
            forestmembers.append(classmembers[i])
    return xysets, forestmembers

def get_all_sets_for_allele(aname, forestmembers, canames):
    """
    Find the sets that a particular allele belongs to.

    :param aname: the allele name    
 
    :param forestmembers: list of lists. forestmembers[0] is the first allele set, etc.
  
    :param canames: these are the allele names, the indexing of this list corresponds to forestmembers (integers)

    :return: list of forests to use for the particular allele
    """

    anum = canames.index(aname)
    useforest = []
    for i in range(len(forestmembers)):
        if anum in forestmembers[i]:
            useforest.append(i)
    return useforest

def build_allele_sets_from_seeds(allele_set_number, seeds, radius):
    """
    This is a deterministic algorithm to create allele sets. User provides seeds, 
    which are allele indices, and then every other allele within the given radius
    is included in that set.

    :param allele_set_number: 16 or 95    
    
    :param seeds: the allele indices which seed each set    
 
    :param radius:  other alleles with this distance are included in the see allele's set

    :return: list of allele sets (list of lists), allele names
    """

    # turn the dictionary into a pandas DataFrame
    hdf = pd.DataFrame.from_dict(hla7d,orient='index')

    if allele_set_number == 95:
        hmat = hdf.values
        tree = sklearn.neighbors.KDTree(hmat)
        ind = tree.query_radius(hdf.values[seeds,:], r=radius)
        allele_names = a95_names
    elif allele_set_number == 16:
        hdf16 = hdf.loc[a16_names]
        hmat = hdf16.values
        tree = sklearn.neighbors.KDTree(hmat)
        ind = tree.query_radius(hdf16.values[seeds,:], r=radius)
        allele_names = a16_names
    else:
        raise Exception('not implemented yet for allele_set_number '+str(allele_set_number))

    try:
        assert len(np.unique(np.hstack(ind))) == allele_set_number, "Not all alleles are covered"
    except AssertionError as error:
        print(error)

    allele_set=[]
    for l in ind:
        allele_set.append(np.sort(l).tolist())
    return allele_set, allele_names

def build_allele_sets_soft_clustering(allele_set_number, num_sets, threshold, which_hla_space='all'):
    """
    
    :param allele_set_number: 16 or 95    

    :param num_sets: number of sets to make   

    :param threshold: probability cutoff for inclusions in a cluster   

    :param which_hla_space: which embedding to use to compute similarity (all, left, right)   

    :return: list of allele sets (list of lists), allele names
    """

    import skfuzzy as fuzz

    # turn the dictionary into a pandas DataFrame
    if which_hla_space == 'all':
        hdf = pd.DataFrame.from_dict(hla7d,orient='index')
    elif which_hla_space =='left':
        hdf = pd.DataFrame.from_dict(hlaLEFT6d,orient='index')
    elif which_hla_space =='right':
        hdf = pd.DataFrame.from_dict(hlaRIGHT6d,orient='index')
    else:
        raise Exception('unknown hla space indicator '+str(which_hla_space))

    if allele_set_number == 95:
        hmat = hdf.values
        allele_names = a95_names
    elif allele_set_number == 16:
        hdf16 = hdf.loc[a16_names]
        hmat = hdf16.values
        allele_names = a16_names
    else:
        raise Exception('not implemented yet for allele_set_number '+str(allele_set_number))

    cntr, u, u0, d, jm, p, fpc = fuzz.cluster.cmeans(
        np.transpose(hmat), num_sets, 2, error=0.005, maxiter=1000, init=None)

    p = np.transpose(u)

    membership = p > threshold

    try:
        assert membership.any(axis=1).all(), "Not all alleles are covered"
    except AssertionError as error:
        print(error)

    allele_set = [[i for i, x in enumerate(membership[:,j]) if x] for j in range(membership.shape[1])]

    return allele_set, allele_names

# try it:
# a, anames = build_allele_sets_from_seeds(16,[1,7,11,13,14],400)
# print(a)

# b, anames = build_allele_sets_soft_clustering(16,5,0.1)
# print(b)
